import tkinter as tk
from tkinter import messagebox
import timeit
import itertools

# Словарь калорийности фруктов (калорий на 1 фрукт)
calories_dict = {
    'яблоко': 52,
    'банан': 89,
    'груша': 57,
    'персик': 39,
    'слива': 46
}

max_calories = 200
N = 3
fruits = list(calories_dict.keys())

# Алгоритмический подход для генерации меню
def generate_menu_algorithmic(fruits, N):
    def helper(temp_menu, start):
        if len(temp_menu) == N:
            result.append(list(temp_menu))
            return
        for i in range(start, len(fruits)):
            temp_menu.append(fruits[i])
            helper(temp_menu, i)
            temp_menu.pop()

    result = []
    helper([], 0)
    return result

# Подход с использованием функций Python
def generate_menu_pythonic(fruits, N):
    return list(itertools.combinations_with_replacement(fruits, N))

# Введение ограничения по калориям
def generate_menu_with_constraint(fruits, N, max_calories):
    def helper(temp_menu, start):
        if len(temp_menu) == N:
            if sum(calories_dict[fruit] for fruit in temp_menu) <= max_calories:
                result.append(list(temp_menu))
            return
        for i in range(start, len(fruits)):
            temp_menu.append(fruits[i])
            helper(temp_menu, i)
            temp_menu.pop()

    result = []
    helper([], 0)
    return result

# Нахождение оптимального решения с ограничением по калориям
def find_optimal_menu(fruits, N, max_calories):
    menus = generate_menu_with_constraint(fruits, N, max_calories)
    optimal_menu = max(menus, key=lambda menu: len(set(menu)))
    return optimal_menu

# Функция для замера времени
def measure_time(func, *args):
    start_time = timeit.default_timer()
    result = func(*args)
    end_time = timeit.default_timer()
    return result, end_time - start_time

def run_algorithmic():
    result, time_taken = measure_time(generate_menu_algorithmic, fruits, N)
    messagebox.showinfo("Результаты", f"Варианты меню (алгоритмический подход):\n{result}\nВремя выполнения: {time_taken}")

def run_pythonic():
    result, time_taken = measure_time(generate_menu_pythonic, fruits, N)
    messagebox.showinfo("Результаты", f"Варианты меню (Pythonic подход):\n{result}\nВремя выполнения: {time_taken}")

def run_with_constraint():
    result, time_taken = measure_time(generate_menu_with_constraint, fruits, N, max_calories)
    messagebox.showinfo("Результаты", f"Варианты меню с ограничением по калориям:\n{result}\nВремя выполнения: {time_taken}")

def run_optimal_menu():
    optimal_menu = find_optimal_menu(fruits, N, max_calories)
    messagebox.showinfo("Результаты", f"Оптимальное меню с учетом ограничения:\n{optimal_menu}")

# Создание главного окна
root = tk.Tk()
root.title("Генератор меню")

# Создание кнопок
tk.Button(root, text="Алгоритмический подход", command=run_algorithmic).pack(fill=tk.X)
tk.Button(root, text="Pythonic подход", command=run_pythonic).pack(fill=tk.X)
tk.Button(root, text="С ограничением по калориям", command=run_with_constraint).pack(fill=tk.X)
tk.Button(root, text="Оптимальное меню", command=run_optimal_menu).pack(fill=tk.X)

# Запуск главного цикла
root.mainloop()
